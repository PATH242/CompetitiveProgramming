//input is string, generate it

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

const int generationSize=10;
string desiredString;
bool stringFound=0;
int n,numberOfGenerations; ///n is size of the desiredString

string GENES= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

class Individual{
public:
    string genes;
    int fitness;

    Individual(){
        genes="";
        for(int i=0;i<n;i++)
            genes.push_back(GENES[rand()%52]);

        calculateFitness();
    }
    Individual mate(const Individual& temp){
        Individual child;
        int probability;
        for(int i=0;i<n;i++){
            probability= (rand()%100);
            if(probability<50)
                child.genes[i]= this->genes[i];
            else
                child.genes[i]= temp.genes[i];
        }
        child.mutate();
        child.calculateFitness();
        return child;
    }

    void mutate(){
        int probability;
        for(int i=0;i<n;i++){
            probability= (rand()%100);
            if(probability>=80){
                genes[i]=GENES[rand()%52];
            }
        }
    }

    int calculateFitness(){
        int temp=0;
        for(int i=0;i<n;i++){
            if(genes[i]!=desiredString[i])
                temp++;
        }
        if(!fitness)
            stringFound=1;
        return fitness= temp;
    }

    bool operator<(const Individual& right){
        return(this->fitness<right.fitness);
    }
    friend ostream &operator<<(ostream& output, Individual& I){
        output<<I.genes<<'\n';
        return output;
    }
};

vector<Individual> population;

void makeInitialPopulation(){
    for(int i=0;i<generationSize;i++){
        Individual I;
        population.push_back(I);
    }
    return;
}


void selectAdvancedIndividuals(){
    ///sort to have biggest(least similar) first
    for(int i=0;i<population.size();i++){
        for(int j=i+1;j<population.size();j++){
            if(population[i]<population[j])
                swap(population[i],population[j]);
        }
    }
    vector<Individual> newPopulation;
    Individual temp;
    int probability;
    ///mating with giving most similar higher probability in mating
    for(int i=population.size()-1;i>=0;i--){
        for(int j=i-1;j>=0;j--){
            probability= (rand()%100)+i*2;
            if(probability>=60){
                temp= population[i].mate(population[j]);
                newPopulation.push_back(temp);
            }
        }
    }
    ///sort to have biggest(least similar) last
    for(int i=0;i<newPopulation.size();i++){
        for(int j=i+1;j<newPopulation.size();j++){
            if(newPopulation[j]<newPopulation[i])
                swap(newPopulation[i],newPopulation[j]);
        }
    }
    ///eliminate from the new population so that it suits the generation size
    while(newPopulation.size()>generationSize)
        newPopulation.pop_back();

    population= newPopulation;
    return;
}



int main() {
    cout<<"Please enter the string you desire to generate:\n";
    cin>>desiredString;

    n= desiredString.size();
    makeInitialPopulation();

    while(!stringFound){
        numberOfGenerations++;
        cout<<numberOfGenerations<<" "<<population[0];
        selectAdvancedIndividuals();
    }
    cout<<"We found the string, and it took us "<<numberOfGenerations<<" generations to get it\n";
    return 0;
}
