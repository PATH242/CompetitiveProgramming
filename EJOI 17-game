/* This takes O(N*K) and only gets 95% of the cases... for every number of the K numbers, we start an O(N) loop that works with having a 
pointer to the maximum number we have so far and a frequency array, if fr[mx] was equal to zero at any given time, we subtract
1 from mx till it reaches f[mx]!=0.... and if the number we're adding this turn is >=mx, we give it to the next 
player automatically, if not, we just add 1 to fr[x], this way, mx would never increase, it'll only decrease ...
ps: by N I mean 1e5 not n
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
const int N=1e5+5;
int n,k,ar[N],fr[N],tmp,mx,mn,tk;
ll a,b;
int main(){
    scanf("%d%d",&n,&k);
    for(int i=0;i<n;i++){
        scanf("%d",&ar[i]);
        t[i]=ar[i];
    }
    while(k--){
        memset(fr,0,sizeof fr);
        scanf("%d",&tmp);
        a=b=mx=0;
        mn=N;
        for(int i=0;i<tmp;i++){
            fr[ar[i]]++;
            mx=max(ar[i],mx);
        }
        tk=mx;
        for(int i=0;i<n;i++){
            //cout<<i<<" "<<a<<" "<<b<<'\n';
            if((i%2)){
                b+=tk;
                fr[tk]--;
                while(!fr[mx]&&mx>-1)mx--;
                if(tmp<n){
                    fr[ar[tmp]]++;
                    if(ar[tmp]>mx)
                        tk=ar[tmp];
                    else
                        tk=mx;
                    tmp++;

                }
                else
                    tk=mx;
            }
            else{
                a+=tk;
                fr[tk]--;
                 while(!fr[mx]&&mx>-1)mx--;
                if(tmp<n){
                    fr[ar[tmp]]++;
                    if(ar[tmp]>mx)
                        tk=ar[tmp];
                    else
                        tk=mx;
                    tmp++;

                }
                else
                    tk=mx;
            }
        }
        a-=b;
        printf("%lld\n",a);
    }
    return 0;
}
